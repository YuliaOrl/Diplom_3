{"name": "Проверка перехода в раздел \"История заказов\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\"> is not clickable at point (968,44) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:331:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:162:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:121:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:214:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:97:31", "trace": "self = <tests.test_personal_page.TestPersonalPage object at 0x000001D09B254A00>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"70d0ecf1-ec8b-48fe-aaa8-6c557e5b4721\")>\n\n    @allure.title('Проверка перехода в раздел \"История заказов\"')\n    @allure.description('Выполняется авторизация, переход в раздел \"История заказов\" и проверяется активация страницы.')\n    def test_enter_in_order_history_page(self, driver):\n        main_page = MainPage(driver)\n        profile_page = ProfilePage(driver)\n        order_history_page = OrderHistoryPage(driver)\n        login_page = LoginPage(driver)\n        login_page.open_url(LOGIN_URL)\n        login_page.set_email(self.payload['email'])\n        login_page.set_password(self.payload['password'])\n        login_page.click_to_button_enter()\n>       main_page.click_to_button_personal_page()\n\ntests\\test_personal_page.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:15: in click_to_button_personal_page\n    self.click_to_element(MainPageLocators.PERSONAL_PAGE_BUTTON)\npages\\base_page.py:32: in click_to_element\n    self.find_element_with_wait_to_be_clickable(locator).click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D098805820>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <p class=\\\\\"AppHeader_heade...sys.mjs:214:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:97:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\"> is not clickable at point (968,44) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:331:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:162:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:121:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:214:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:97:31\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Выполняется авторизация, переход в раздел \"История заказов\" и проверяется активация страницы.", "steps": [{"name": "Открытие страницы 'https://stellarburgers.nomoreparties.site/login'", "status": "passed", "parameters": [{"name": "url", "value": "'https://stellarburgers.nomoreparties.site/login'"}], "start": 1721875552602, "stop": 1721875553782}, {"name": "Ввод почты 'rcwkmb@yandex.ru' в поле \"Email\"", "status": "passed", "parameters": [{"name": "email", "value": "'rcwkmb@yandex.ru'"}], "start": 1721875553782, "stop": 1721875553865}, {"name": "Ввод пароля 'jkjlqn' в поле \"Пароль\"", "status": "passed", "parameters": [{"name": "password", "value": "'jkjlqn'"}], "start": 1721875553866, "stop": 1721875554017}, {"name": "Клик на кнопку \"Войти\"", "status": "passed", "start": 1721875554017, "stop": 1721875554316}, {"name": "Клик на кнопку \"Личный кабинет\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\"> is not clickable at point (968,44) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:331:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:162:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:121:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:214:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:97:31\n\n", "trace": "  File \"C:\\Users\\YAORLOVA2\\PycharmProjects\\YandexHomeWork\\Diplom\\Diplom_3\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\YAORLOVA2\\PycharmProjects\\YandexHomeWork\\Diplom\\Diplom_3\\pages\\main_page.py\", line 15, in click_to_button_personal_page\n    self.click_to_element(MainPageLocators.PERSONAL_PAGE_BUTTON)\n  File \"C:\\Users\\YAORLOVA2\\PycharmProjects\\YandexHomeWork\\Diplom\\Diplom_3\\pages\\base_page.py\", line 32, in click_to_element\n    self.find_element_with_wait_to_be_clickable(locator).click()\n  File \"C:\\Users\\YAORLOVA2\\PycharmProjects\\YandexHomeWork\\Diplom\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\YAORLOVA2\\PycharmProjects\\YandexHomeWork\\Diplom\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\YAORLOVA2\\PycharmProjects\\YandexHomeWork\\Diplom\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\YAORLOVA2\\PycharmProjects\\YandexHomeWork\\Diplom\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1721875554316, "stop": 1721875554385}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1721875552602, "stop": 1721875554386, "uuid": "a4c9aaca-eb82-472e-98c2-34d896418a82", "historyId": "939397a26f5423b8aa88bf1602e131bc", "testCaseId": "a98cd4d50ed7dfa1ab627aecd1a12701", "fullName": "tests.test_personal_page.TestPersonalPage#test_enter_in_order_history_page", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_personal_page"}, {"name": "subSuite", "value": "TestPersonalPage"}, {"name": "host", "value": "0000NBB01479NSR"}, {"name": "thread", "value": "428-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_personal_page"}]}